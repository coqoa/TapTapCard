{"version":3,"sources":["RewardedAd.ts"],"names":["RewardedAd","MobileAd","createForAdRequest","adUnitId","requestOptions","Error","options","e","message","requestId","_rewardedRequest","addAdEventsListener","listener","_addAdEventsListener","addAdEventListener","type","AdEventType","LOADED","_addAdEventListener"],"mappings":";;;;;;;AAiBA;;AACA;;AACA;;AACA;;AACA;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,UAAN,SAAyBC,kBAAzB,CAAkC;AAEvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC2B,SAAlBC,kBAAkB,CAACC,QAAD,EAAmBC,cAAnB,EAAoD;AAC3E,QAAI,CAAC,sBAASD,QAAT,CAAL,EAAyB;AACvB,YAAM,IAAIE,KAAJ,CAAU,uEAAV,CAAN;AACD;;AAED,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAI;AACFA,MAAAA,OAAO,GAAG,wDAAyBF,cAAzB,CAAV;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV,UAAIA,CAAC,YAAYF,KAAjB,EAAwB;AACtB,cAAM,IAAIA,KAAJ,CAAW,uCAAsCE,CAAC,CAACC,OAAQ,GAA3D,CAAN;AACD;AACF;;AAED,UAAMC,SAAS,GAAGT,UAAU,CAACU,gBAAX,EAAlB;AACA,WAAO,IAAIV,UAAJ,CAAe,UAAf,EAA2B,2BAA3B,EAAwCS,SAAxC,EAAmDN,QAAnD,EAA6DG,OAA7D,CAAP;AACD;;AAEDK,EAAAA,mBAAmB,CACjBC,QADiB,EAEL;AACZ,WAAO,KAAKC,oBAAL,CAA0BD,QAA1B,CAAP;AACD;;AAEDE,EAAAA,kBAAkB,CAChBC,IADgB,EAEhBH,QAFgB,EAGhB;AACA,QAAIG,IAAI,KAAKC,yBAAYC,MAAzB,EAAiC;AAC/B,YAAM,IAAIZ,KAAJ,CACJ,gGADI,CAAN;AAGD;;AACD,WAAO,KAAKa,mBAAL,CAAyBH,IAAzB,EAA+BH,QAA/B,CAAP;AACD;;AA7DsC;;;;gBAA5BZ,U,sBACyB,C","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '../common';\nimport { MobileAds } from '../MobileAds';\nimport { validateAdRequestOptions } from '../validateAdRequestOptions';\nimport { MobileAd } from './MobileAd';\nimport { AdEventType } from '../AdEventType';\nimport { RewardedAdEventType } from '../RewardedAdEventType';\nimport { AdEventListener } from '../types/AdEventListener';\nimport { AdEventsListener } from '../types/AdEventsListener';\nimport { RequestOptions } from '../types/RequestOptions';\n\n/**\n * A class for interacting and showing Rewarded Ads.\n *\n * An Rewarded advert can be pre-loaded and shown at a suitable point in your apps flow, such as at the end of a level\n * in a game. The content of a rewarded advert can be controlled via your Google Mobile Ads dashboard. Typically users are rewarded\n * after completing a specific advert action (e.g. watching a video or submitting an option via an interactive form).\n * Events (such as the user earning a reward or closing a rewarded advert early) are sent back for you to handle accordingly\n * within your application.\n *\n * #### Example\n *\n * First create a new Rewarded instance, passing in your Ad Unit ID from the Google Mobile Ads configuration console, and any additional\n * request options. The example below will present a test advert, and only request a non-personalized ad.\n *\n * ```js\n * import { RewardedAd, TestIds } from 'react-native-google-mobile-ads';\n *\n * const rewarded = RewardedAd.createForAdRequest(TestIds.REWARDED, {\n *     requestNonPersonalizedAdsOnly: true,\n * });\n *  ```\n *\n * Each advert needs to be loaded from Google Mobile Ads before being shown. It is recommended this is performed before the user\n * reaches the checkpoint to show the advert, so it's ready to go. Before loading the advert, we need to setup\n * event listeners to listen for updates from Google Mobile Ads, such as advert loaded or failed to load.\n *\n * Event types match the `AdEventType` or `RewardedAdEventType` interface. The potential user reward for rewarded\n * adverts are passed back to the event handler on advert load and when the user earns the reward.\n *\n * ```js\n * import { RewardedAdEventType } from 'react-native-google-mobile-ads';\n *\n * rewarded.addAdEventListener(RewardedAdEventType.LOADED. () => {\n *   rewarded.show();\n * });\n * rewarded.addAdEventListener(RewardedAdEventType.EARNED_REWARD. (reward) => {\n *   console.log('User earned reward of ', reward);\n * });\n *\n * rewarded.load();\n *  ```\n *\n * The rewarded advert will be presented to the user, and several more events can be triggered such as the user clicking the\n * advert, closing it or completing the action.\n */\nexport class RewardedAd extends MobileAd {\n  protected static _rewardedRequest = 0;\n  /**\n   * Creates a new RewardedAd instance.\n   *\n   * #### Example\n   *\n   * ```js\n   * import { RewardedAd, RewardedAdEventType, TestIds } from 'react-native-google-mobile-ads';\n   *\n   * const rewardedAd = await RewardedAd.createForAdRequest(TestIds.REWARDED, {\n   *   requestAgent: 'CoolAds',\n   * });\n   *\n   * rewarded.addAdEventListener(RewardedAdEventType.LOADED. () => {\n   *   rewarded.show();\n   * });\n   * rewarded.addAdEventListener(RewardedAdEventType.EARNED_REWARD. (reward) => {\n   *   console.log('User earned reward of ', reward);\n   * });\n   *\n   * rewardedAd.load();\n   * ```\n   *\n   * @param adUnitId The Ad Unit ID for the Rewarded Ad. You can find this on your Google Mobile Ads dashboard.\n   * @param requestOptions Optional RequestOptions used to load the ad.\n   */\n  static createForAdRequest(adUnitId: string, requestOptions?: RequestOptions) {\n    if (!isString(adUnitId)) {\n      throw new Error(\"RewardedAd.createForAdRequest(*) 'adUnitId' expected an string value.\");\n    }\n\n    let options = {};\n    try {\n      options = validateAdRequestOptions(requestOptions);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw new Error(`RewardedAd.createForAdRequest(_, *) ${e.message}.`);\n      }\n    }\n\n    const requestId = RewardedAd._rewardedRequest++;\n    return new RewardedAd('rewarded', MobileAds(), requestId, adUnitId, options);\n  }\n\n  addAdEventsListener<T extends AdEventType | RewardedAdEventType>(\n    listener: AdEventsListener<T>,\n  ): () => void {\n    return this._addAdEventsListener(listener);\n  }\n\n  addAdEventListener<T extends AdEventType | RewardedAdEventType>(\n    type: T,\n    listener: AdEventListener<T>,\n  ) {\n    if (type === AdEventType.LOADED) {\n      throw new Error(\n        'RewardedAd.addAdEventListener(*) use RewardedAdEventType.LOADED instead of AdEventType.LOADED.',\n      );\n    }\n    return this._addAdEventListener(type, listener);\n  }\n}\n"]}