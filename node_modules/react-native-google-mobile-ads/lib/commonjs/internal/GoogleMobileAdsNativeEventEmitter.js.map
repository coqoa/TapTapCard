{"version":3,"sources":["GoogleMobileAdsNativeEventEmitter.ts"],"names":["RNAppModule","NativeModules","GANativeEventEmitter","NativeEventEmitter","constructor","ready","addListener","eventType","listener","context","eventsNotifyReady","eventsAddListener","subscription","originalRemove","remove","newRemove","eventsRemoveListener","removeSubscription","removeAllListeners","replace","GoogleMobileAdsNativeEventEmitter"],"mappings":";;;;;;;AAiBA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,0BAAxB;;AAEA,MAAMC,oBAAN,SAAmCC,+BAAnC,CAAsD;AAGpDC,EAAAA,WAAW,GAAG;AACZ,UAAMJ,WAAN;;AADY;;AAEZ,SAAKK,KAAL,GAAa,KAAb;AACD;;AAEDC,EAAAA,WAAW,CACTC,SADS,EAETC,QAFS,EAGTC,OAHS,EAIT;AACA,QAAI,CAAC,KAAKJ,KAAV,EAAiB;AACfL,MAAAA,WAAW,CAACU,iBAAZ,CAA8B,IAA9B;AACA,WAAKL,KAAL,GAAa,IAAb;AACD;;AACDL,IAAAA,WAAW,CAACW,iBAAZ,CAA8BJ,SAA9B;AAEA,UAAMK,YAAY,GAAG,MAAMN,WAAN,CAAmB,SAAQC,SAAU,EAArC,EAAwCC,QAAxC,EAAkDC,OAAlD,CAArB,CAPA,CASA;AACA;AACA;AAEA;;AACAG,IAAAA,YAAY,CAACL,SAAb,GAA0B,SAAQA,SAAU,EAA5C,CAdA,CAgBA;AACA;;AACA,UAAMM,cAAc,GAAGD,YAAY,CAACE,MAApC;;AACA,UAAMC,SAAS,GAAG,MAAM;AACtBf,MAAAA,WAAW,CAACgB,oBAAZ,CAAiCT,SAAjC,EAA4C,KAA5C;;AACA,UAAI,MAAMU,kBAAN,IAA4B,IAAhC,EAAsC;AACpC;AACA,cAAMA,kBAAN,CAAyBL,YAAzB;AACD,OAHD,MAGO,IAAIC,cAAc,IAAI,IAAtB,EAA4B;AACjC;AACAA,QAAAA,cAAc;AACf;AACF,KATD;;AAUAD,IAAAA,YAAY,CAACE,MAAb,GAAsBC,SAAtB;AACA,WAAOH,YAAP;AACD;;AAEDM,EAAAA,kBAAkB,CAACX,SAAD,EAAoB;AACpCP,IAAAA,WAAW,CAACgB,oBAAZ,CAAiCT,SAAjC,EAA4C,IAA5C;AACA,UAAMW,kBAAN,CAA0B,SAAQX,SAAU,EAA5C;AACD,GAhDmD,CAkDpD;;;AACAU,EAAAA,kBAAkB,CAACL,YAAD,EAAoC;AACpDZ,IAAAA,WAAW,CAACgB,oBAAZ,CAAiCJ,YAAY,CAACL,SAAb,CAAuBY,OAAvB,CAA+B,QAA/B,EAAyC,EAAzC,CAAjC,EAA+E,KAA/E;;AACA,QAAI,MAAMF,kBAAN,IAA4B,IAAhC,EAAsC;AACpC,YAAMA,kBAAN,CAAyBL,YAAzB;AACD;AACF;;AAxDmD;;AA2D/C,MAAMQ,iCAAiC,GAAG,IAAIlB,oBAAJ,EAA1C","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { NativeEventEmitter, NativeModules, EmitterSubscription } from 'react-native';\n\nconst { RNAppModule } = NativeModules;\n\nclass GANativeEventEmitter extends NativeEventEmitter {\n  ready: boolean;\n\n  constructor() {\n    super(RNAppModule);\n    this.ready = false;\n  }\n\n  addListener(\n    eventType: string,\n    listener: (event: { appName?: string }) => void,\n    context?: Record<string, unknown>,\n  ) {\n    if (!this.ready) {\n      RNAppModule.eventsNotifyReady(true);\n      this.ready = true;\n    }\n    RNAppModule.eventsAddListener(eventType);\n\n    const subscription = super.addListener(`rnapp_${eventType}`, listener, context);\n\n    // React Native 0.65+ altered EventEmitter:\n    // - removeSubscription is gone\n    // - addListener returns an unsubscriber instead of a more complex object with eventType etc\n\n    // make sure eventType for backwards compatibility just in case\n    subscription.eventType = `rnapp_${eventType}`;\n\n    // New style is to return a remove function on the object, just in csae people call that,\n    // we will modify it to do our native unsubscription then call the original\n    const originalRemove = subscription.remove;\n    const newRemove = () => {\n      RNAppModule.eventsRemoveListener(eventType, false);\n      if (super.removeSubscription != null) {\n        // This is for RN <= 0.64 - 65 and greater no longer have removeSubscription\n        super.removeSubscription(subscription);\n      } else if (originalRemove != null) {\n        // This is for RN >= 0.65\n        originalRemove();\n      }\n    };\n    subscription.remove = newRemove;\n    return subscription;\n  }\n\n  removeAllListeners(eventType: string) {\n    RNAppModule.eventsRemoveListener(eventType, true);\n    super.removeAllListeners(`rnapp_${eventType}`);\n  }\n\n  // This is likely no longer ever called, but it is here for backwards compatibility with RN <= 0.64\n  removeSubscription(subscription: EmitterSubscription) {\n    RNAppModule.eventsRemoveListener(subscription.eventType.replace('rnapp_', ''), false);\n    if (super.removeSubscription != null) {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nexport const GoogleMobileAdsNativeEventEmitter = new GANativeEventEmitter();\n"]}