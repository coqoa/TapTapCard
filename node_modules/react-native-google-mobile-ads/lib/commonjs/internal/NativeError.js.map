{"version":3,"sources":["NativeError.ts"],"names":["NativeError","Error","fromEvent","errorEvent","namespace","stack","userInfo","constructor","nativeError","jsStack","code","message","getStackWithMessage","split","slice","join"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEO,MAAMA,WAAN,SAA0BC,KAA1B,CAAgC;AAOrB,SAATC,SAAS,CACdC,UADc,EAEdC,SAFc,EAGdC,KAHc,EAId;AACA,WAAO,IAAIL,WAAJ,CAAgB;AAAEM,MAAAA,QAAQ,EAAEH;AAAZ,KAAhB,EAA0CE,KAAK,IAAI,IAAIJ,KAAJ,GAAYI,KAArB,IAA8B,EAAxE,EAA4ED,SAA5E,CAAP;AACD;;AAEDG,EAAAA,WAAW,CACTC,WADS,EAETC,OAFS,EAGTL,SAHS,EAIT;AACA;;AADA;;AAAA;;AAAA;;AAAA;;AAAA;;AAEA,UAAM;AAAEE,MAAAA;AAAF,QAAeE,WAArB;AACA,SAAKJ,SAAL,GAAiBA,SAAjB;AACA,SAAKM,IAAL,GAAa,GAAE,KAAKN,SAAU,IAAGE,QAAQ,CAACI,IAAT,IAAiB,SAAU,EAA5D;AACA,SAAKC,OAAL,GAAgB,IAAG,KAAKD,IAAK,KAAIJ,QAAQ,CAACK,OAAQ,EAAlD;AACA,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACA,SAAKD,KAAL,GAAaL,WAAW,CAACY,mBAAZ,CAAiC,gBAAe,KAAKD,OAAQ,EAA7D,EAAgE,KAAKF,OAArE,CAAb;AACD;AAED;AACF;AACA;AACA;AACA;;;AAC4B,SAAnBG,mBAAmB,CAACD,OAAD,EAAkBF,OAAlB,EAAmC;AAC3D,WAAO,CAACE,OAAD,EAAU,GAAGF,OAAO,CAACI,KAAR,CAAc,IAAd,EAAoBC,KAApB,CAA0B,CAA1B,EAA6B,EAA7B,CAAb,EAA+CC,IAA/C,CAAoD,IAApD,CAAP;AACD;;AArCoC","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nexport class NativeError extends Error {\n  namespace: string;\n  code: string;\n  message: string;\n  jsStack: string;\n  userInfo: { code: string; message: string };\n\n  static fromEvent(\n    errorEvent: { code: string; message: string },\n    namespace: string,\n    stack?: string,\n  ) {\n    return new NativeError({ userInfo: errorEvent }, stack || new Error().stack || '', namespace);\n  }\n\n  constructor(\n    nativeError: { userInfo: { code: string; message: string } },\n    jsStack: string,\n    namespace: string,\n  ) {\n    super();\n    const { userInfo } = nativeError;\n    this.namespace = namespace;\n    this.code = `${this.namespace}/${userInfo.code || 'unknown'}`;\n    this.message = `[${this.code}] ${userInfo.message}`;\n    this.jsStack = jsStack;\n    this.userInfo = userInfo;\n    this.stack = NativeError.getStackWithMessage(`NativeError: ${this.message}`, this.jsStack);\n  }\n\n  /**\n   * Build a stack trace that includes JS stack prior to calling the native method.\n   *\n   * @returns {string}\n   */\n  static getStackWithMessage(message: string, jsStack: string) {\n    return [message, ...jsStack.split('\\n').slice(2, 13)].join('\\n');\n  }\n}\n"]}