{"version":3,"sources":["index.ts"],"names":["Platform","Base64","isString","ReferenceBase","getDataUrlParts","dataUrlString","isBase64","includes","mediaType","base64String","split","undefined","replace","decodeURIComponent","btoa","once","fn","context","onceResult","ranOnce","onceInner","args","apply","isError","value","Object","prototype","toString","call","Error","hasOwnProperty","target","property","stripTrailingSlash","string","endsWith","slice","isIOS","OS","isAndroid","tryJSONParse","JSON","parse","jsonError","tryJSONStringify","data","stringify"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Platform } from 'react-native';\nimport * as Base64 from './Base64';\nimport { isString } from './validate';\n\nexport * from './id';\nexport * from './path';\nexport * from './promise';\nexport * from './validate';\n\nexport { Base64 };\nexport { ReferenceBase } from './ReferenceBase';\n\nexport function getDataUrlParts(dataUrlString: string) {\n  const isBase64 = dataUrlString.includes(';base64');\n  let [mediaType, base64String] = dataUrlString.split(',');\n  if (!mediaType || !base64String) {\n    return { base64String: undefined, mediaType: undefined };\n  }\n  mediaType = mediaType.replace('data:', '').replace(';base64', '');\n  if (base64String && base64String.includes('%')) {\n    base64String = decodeURIComponent(base64String);\n  }\n  if (!isBase64) {\n    base64String = Base64.btoa(base64String);\n  }\n  return { base64String, mediaType };\n}\n\nexport function once<T>(fn: () => void, context: unknown): (this: T, ...args: []) => void {\n  let onceResult: unknown;\n  let ranOnce = false;\n\n  return function onceInner(...args: []) {\n    if (!ranOnce) {\n      ranOnce = true;\n      onceResult = fn.apply(context || this, args);\n    }\n\n    return onceResult;\n  };\n}\n\nexport function isError(value: unknown) {\n  if (Object.prototype.toString.call(value) === '[object Error]') {\n    return true;\n  }\n\n  return value instanceof Error;\n}\n\nexport function hasOwnProperty(target: unknown, property: PropertyKey) {\n  return Object.hasOwnProperty.call(target, property);\n}\n\n/**\n * Remove a trailing forward slash from a string if it exists\n *\n * @param string\n * @returns {*}\n */\nexport function stripTrailingSlash(string: string) {\n  if (!isString(string)) {\n    return string;\n  }\n  return string.endsWith('/') ? string.slice(0, -1) : string;\n}\n\nexport const isIOS = Platform.OS === 'ios';\n\nexport const isAndroid = Platform.OS === 'android';\n\nexport function tryJSONParse(string: string) {\n  try {\n    return string && JSON.parse(string);\n  } catch (jsonError) {\n    return string;\n  }\n}\n\nexport function tryJSONStringify(data: unknown) {\n  try {\n    return JSON.stringify(data);\n  } catch (jsonError) {\n    return null;\n  }\n}\n"]}