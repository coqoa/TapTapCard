{"version":3,"sources":["InterstitialAd.ts"],"names":["isString","MobileAds","validateAdRequestOptions","MobileAd","InterstitialAd","createForAdRequest","adUnitId","requestOptions","Error","options","e","message","requestId","_interstitialRequest","addAdEventsListener","listener","_addAdEventsListener","addAdEventListener","type","_addAdEventListener"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,WAAzB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,wBAAT,QAAyC,6BAAzC;AACA,SAASC,QAAT,QAAyB,YAAzB;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAN,SAA6BD,QAA7B,CAAsC;AAE3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC2B,SAAlBE,kBAAkB,CAACC,QAAD,EAAmBC,cAAnB,EAAoD;AAC3E,QAAI,CAACP,QAAQ,CAACM,QAAD,CAAb,EAAyB;AACvB,YAAM,IAAIE,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAED,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAI;AACFA,MAAAA,OAAO,GAAGP,wBAAwB,CAACK,cAAD,CAAlC;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV,UAAIA,CAAC,YAAYF,KAAjB,EAAwB;AACtB,cAAM,IAAIA,KAAJ,CAAW,2CAA0CE,CAAC,CAACC,OAAQ,GAA/D,CAAN;AACD;AACF;;AAED,UAAMC,SAAS,GAAGR,cAAc,CAACS,oBAAf,EAAlB;AACA,WAAO,IAAIT,cAAJ,CAAmB,cAAnB,EAAmCH,SAAS,EAA5C,EAAgDW,SAAhD,EAA2DN,QAA3D,EAAqEG,OAArE,CAAP;AACD;;AAEDK,EAAAA,mBAAmB,CAAwBC,QAAxB,EAAuD;AACxE,WAAO,KAAKC,oBAAL,CAA0BD,QAA1B,CAAP;AACD;;AAEDE,EAAAA,kBAAkB,CAAwBC,IAAxB,EAAiCH,QAAjC,EAA+D;AAC/E,WAAO,KAAKI,mBAAL,CAAyBD,IAAzB,EAA+BH,QAA/B,CAAP;AACD;;AAhD0C;;gBAAhCX,c,0BAC6B,C","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '../common';\nimport { MobileAds } from '../MobileAds';\nimport { validateAdRequestOptions } from '../validateAdRequestOptions';\nimport { MobileAd } from './MobileAd';\nimport { AdEventType } from '../AdEventType';\nimport { AdEventListener } from '../types/AdEventListener';\nimport { AdEventsListener } from '../types/AdEventsListener';\nimport { RequestOptions } from '../types/RequestOptions';\n\n/**\n * A class for interacting and showing Interstitial Ads.\n *\n * An Interstitial advert can be pre-loaded and shown at a suitable point in your apps flow, such as at the end of a level\n * in a game. An Interstitial is a full screen advert, laid on-top of your entire application which the user can interact with.\n * Interactions are passed back via events which should be handled accordingly inside of your app.\n *\n * #### Example\n *\n * First create a new Interstitial instance, passing in your Ad Unit ID from the Google Mobile Ads configuration console, and any additional\n * request options. The example below will present a test advert, and only request a non-personalized ad.\n *\n * ```js\n * import { InterstitialAd, TestIds } from 'react-native-google-mobile-ads';\n *\n * const interstitial = InterstitialAd.createForAdRequest(TestIds.INTERSTITIAL, {\n *     requestNonPersonalizedAdsOnly: true,\n * });\n *  ```\n *\n * Each advert needs to be loaded from Google Mobile Ads before being shown. It is recommended this is performed before the user\n * reaches the checkpoint to show the advert, so it's ready to go. Before loading the advert, we need to setup\n * event listeners to listen for updates from Google Mobile Ads, such as advert loaded or failed to load.\n *\n * Event types match the `AdEventType` interface. Once the advert has loaded, we can trigger it to show:\n *\n * ```js\n * import { AdEventType } from 'react-native-google-mobile-ads';\n *\n * interstitialAd.addAdEventListener(AdEventType.Loaded, () => {\n *   interstitialAd.show();\n * });\n *\n * interstitial.load();\n *  ```\n *\n * The advert will be presented to the user, and several more events can be triggered such as the user clicking the\n * advert or closing it.\n */\nexport class InterstitialAd extends MobileAd {\n  protected static _interstitialRequest = 0;\n  /**\n   * Creates a new InterstitialAd instance.\n   *\n   * #### Example\n   *\n   * ```js\n   * import { InterstitialAd, AdEventType, TestIds } from 'react-native-google-mobile-ads';\n   *\n   * const interstitialAd = await InterstitialAd.createForAdRequest(TestIds.INTERSTITIAL, {\n   *   requestAgent: 'CoolAds',\n   * });\n   *\n   * interstitialAd.addAdEventListener(AdEventType.Loaded, () => {\n   *   interstitialAd.show();\n   * });\n   *\n   * interstitialAd.load();\n   * ```\n   *\n   * @param adUnitId The Ad Unit ID for the Interstitial. You can find this on your Google Mobile Ads dashboard.\n   * @param requestOptions Optional RequestOptions used to load the ad.\n   */\n  static createForAdRequest(adUnitId: string, requestOptions?: RequestOptions) {\n    if (!isString(adUnitId)) {\n      throw new Error(\"InterstitialAd.createForAdRequest(*) 'adUnitId' expected an string value.\");\n    }\n\n    let options = {};\n    try {\n      options = validateAdRequestOptions(requestOptions);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw new Error(`InterstitialAd.createForAdRequest(_, *) ${e.message}.`);\n      }\n    }\n\n    const requestId = InterstitialAd._interstitialRequest++;\n    return new InterstitialAd('interstitial', MobileAds(), requestId, adUnitId, options);\n  }\n\n  addAdEventsListener<T extends AdEventType>(listener: AdEventsListener<T>) {\n    return this._addAdEventsListener(listener);\n  }\n\n  addAdEventListener<T extends AdEventType>(type: T, listener: AdEventListener<T>) {\n    return this._addAdEventListener(type, listener);\n  }\n}\n"]}