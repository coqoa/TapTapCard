{"version":3,"sources":["BaseAd.tsx"],"names":["React","useState","useEffect","requireNativeComponent","isFunction","NativeError","BannerAdSize","validateAdRequestOptions","sizeRegex","BaseAd","forwardRef","ref","unitId","sizes","requestOptions","manualImpressionsEnabled","props","dimensions","setDimensions","Error","length","every","size","test","parsedRequestOptions","JSON","stringify","e","message","onNativeEvent","nativeEvent","type","eventHandler","eventPayload","width","height","fromEvent","name","data","style","includes","FLUID","displayName","GoogleMobileAdsBannerView"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { NativeMethods, requireNativeComponent } from 'react-native';\nimport { isFunction } from '../common';\nimport { NativeError } from '../internal/NativeError';\nimport { BannerAdSize } from '../BannerAdSize';\nimport { validateAdRequestOptions } from '../validateAdRequestOptions';\nimport { GAMBannerAdProps } from '../types/BannerAdProps';\nimport { RequestOptions } from '../types/RequestOptions';\n\ntype NativeEvent =\n  | {\n      type: 'onAdLoaded' | 'onSizeChange';\n      width: number;\n      height: number;\n    }\n  | { type: 'onAdOpened' | 'onAdClosed' }\n  | {\n      type: 'onAdFailedToLoad';\n      code: string;\n      message: string;\n    }\n  | {\n      type: 'onAppEvent';\n      name: string;\n      data?: string;\n    };\n\nconst sizeRegex = /([0-9]+)x([0-9]+)/;\n\nexport const BaseAd = React.forwardRef<GoogleMobileAdsBannerView, GAMBannerAdProps>(\n  ({ unitId, sizes, requestOptions, manualImpressionsEnabled, ...props }, ref) => {\n    const [dimensions, setDimensions] = useState<(number | string)[]>([0, 0]);\n\n    useEffect(() => {\n      if (!unitId) {\n        throw new Error(\"BannerAd: 'unitId' expected a valid string unit ID.\");\n      }\n    }, [unitId]);\n\n    useEffect(() => {\n      if (\n        sizes.length === 0 ||\n        !sizes.every(size => size in BannerAdSize || sizeRegex.test(size))\n      ) {\n        throw new Error(\"BannerAd: 'size(s)' expected a valid BannerAdSize or custom size string.\");\n      }\n    }, [sizes]);\n\n    const parsedRequestOptions = JSON.stringify(requestOptions);\n\n    useEffect(() => {\n      if (requestOptions) {\n        try {\n          validateAdRequestOptions(requestOptions);\n        } catch (e) {\n          if (e instanceof Error) {\n            throw new Error(`BannerAd: ${e.message}`);\n          }\n        }\n      }\n    }, [parsedRequestOptions]);\n\n    function onNativeEvent({ nativeEvent }: { nativeEvent: NativeEvent }) {\n      const { type } = nativeEvent;\n\n      if (type !== 'onSizeChange' && isFunction(props[type])) {\n        let eventHandler, eventPayload;\n        switch (type) {\n          case 'onAdLoaded':\n            eventPayload = {\n              width: nativeEvent.width,\n              height: nativeEvent.height,\n            };\n            if ((eventHandler = props[type])) eventHandler(eventPayload);\n            break;\n          case 'onAdFailedToLoad':\n            eventPayload = NativeError.fromEvent(nativeEvent, 'googleMobileAds');\n            if ((eventHandler = props[type])) eventHandler(eventPayload);\n            break;\n          case 'onAppEvent':\n            eventPayload = {\n              name: nativeEvent.name,\n              data: nativeEvent.data,\n            };\n            if ((eventHandler = props[type])) eventHandler(eventPayload);\n            break;\n          default:\n            if ((eventHandler = props[type])) eventHandler();\n        }\n      }\n\n      if (type === 'onAdLoaded' || type === 'onSizeChange') {\n        const { width, height } = nativeEvent;\n        if (width && height) setDimensions([width, height]);\n      }\n    }\n\n    const style = sizes.includes(BannerAdSize.FLUID)\n      ? {\n          width: '100%',\n          height: dimensions[1],\n        }\n      : {\n          width: dimensions[0],\n          height: dimensions[1],\n        };\n\n    return (\n      <GoogleMobileAdsBannerView\n        ref={ref}\n        sizes={sizes}\n        style={style}\n        unitId={unitId}\n        request={validateAdRequestOptions(requestOptions)}\n        manualImpressionsEnabled={!!manualImpressionsEnabled}\n        onNativeEvent={onNativeEvent}\n      />\n    );\n  },\n);\nBaseAd.displayName = 'BaseAd';\n\ninterface NativeBannerProps {\n  sizes: GAMBannerAdProps['sizes'];\n  style: {\n    width?: number | string;\n    height?: number | string;\n  };\n  unitId: string;\n  request: RequestOptions;\n  manualImpressionsEnabled: boolean;\n  onNativeEvent: (event: { nativeEvent: NativeEvent }) => void;\n}\n\nconst GoogleMobileAdsBannerView = requireNativeComponent<NativeBannerProps>(\n  'RNGoogleMobileAdsBannerView',\n);\nexport type GoogleMobileAdsBannerView = React.Component<NativeBannerProps> & NativeMethods;\n"]}