{"version":3,"sources":["AppOpenAd.ts"],"names":["isString","MobileAds","validateAdRequestOptions","MobileAd","AppOpenAd","createForAdRequest","adUnitId","requestOptions","Error","options","e","message","requestId","_appOpenRequest","addAdEventsListener","listener","_addAdEventsListener","addAdEventListener","type","_addAdEventListener"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,WAAzB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,wBAAT,QAAyC,6BAAzC;AACA,SAASC,QAAT,QAAyB,YAAzB;AAMA,OAAO,MAAMC,SAAN,SAAwBD,QAAxB,CAAiC;AAGb,SAAlBE,kBAAkB,CAACC,QAAD,EAAmBC,cAAnB,EAAoD;AAC3E,QAAI,CAACP,QAAQ,CAACM,QAAD,CAAb,EAAyB;AACvB,YAAM,IAAIE,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAED,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAI;AACFA,MAAAA,OAAO,GAAGP,wBAAwB,CAACK,cAAD,CAAlC;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV,UAAIA,CAAC,YAAYF,KAAjB,EAAwB;AACtB,cAAM,IAAIA,KAAJ,CAAW,sCAAqCE,CAAC,CAACC,OAAQ,GAA1D,CAAN;AACD;AACF;;AAED,UAAMC,SAAS,GAAGR,SAAS,CAACS,eAAV,EAAlB;AACA,WAAO,IAAIT,SAAJ,CAAc,UAAd,EAA0BH,SAAS,EAAnC,EAAuCW,SAAvC,EAAkDN,QAAlD,EAA4DG,OAA5D,CAAP;AACD;;AAEDK,EAAAA,mBAAmB,CAAwBC,QAAxB,EAAmE;AACpF,WAAO,KAAKC,oBAAL,CAA0BD,QAA1B,CAAP;AACD;;AAEDE,EAAAA,kBAAkB,CAAwBC,IAAxB,EAAiCH,QAAjC,EAA+D;AAC/E,WAAO,KAAKI,mBAAL,CAAyBD,IAAzB,EAA+BH,QAA/B,CAAP;AACD;;AA3BqC;;gBAA3BX,S,qBACwB,C","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '../common';\nimport { MobileAds } from '../MobileAds';\nimport { validateAdRequestOptions } from '../validateAdRequestOptions';\nimport { MobileAd } from './MobileAd';\nimport { AdEventType } from '../AdEventType';\nimport { AdEventListener } from '../types/AdEventListener';\nimport { AdEventsListener } from '../types/AdEventsListener';\nimport { RequestOptions } from '../types/RequestOptions';\n\nexport class AppOpenAd extends MobileAd {\n  protected static _appOpenRequest = 0;\n\n  static createForAdRequest(adUnitId: string, requestOptions?: RequestOptions) {\n    if (!isString(adUnitId)) {\n      throw new Error(\"AppOpenAd.createForAdRequest(*) 'adUnitId' expected an string value.\");\n    }\n\n    let options = {};\n    try {\n      options = validateAdRequestOptions(requestOptions);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw new Error(`AppOpenAd.createForAdRequest(_, *) ${e.message}.`);\n      }\n    }\n\n    const requestId = AppOpenAd._appOpenRequest++;\n    return new AppOpenAd('app_open', MobileAds(), requestId, adUnitId, options);\n  }\n\n  addAdEventsListener<T extends AdEventType>(listener: AdEventsListener<T>): () => void {\n    return this._addAdEventsListener(listener);\n  }\n\n  addAdEventListener<T extends AdEventType>(type: T, listener: AdEventListener<T>) {\n    return this._addAdEventListener(type, listener);\n  }\n}\n"]}