{"version":3,"sources":["Validation.ts"],"names":["Validation","constructor","userCode","loading","callback","data","isValid","message","validateUserCode","validateLoading","undefined","validateCallback","validateData","getIsValid","getMessage","IMPData"],"mappings":";;AAAA,MAAMA,UAAN,CAAiB;AAQfC,EAAAA,WAAW,CACTC,QADS,EAETC,OAFS,EAGTC,QAHS,EAITC,IAJS,EAKT;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AAEA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AAEA,SAAKC,gBAAL;AACD;;AAEDA,EAAAA,gBAAgB,GAAG;AACjB,QAAI,CAAC,KAAKN,QAAV,EAAoB;AAClB,WAAKI,OAAL,GAAe,KAAf;AACA,WAAKC,OAAL,GAAe,8BAAf;AACA;AACD;;AACD,SAAKE,eAAL;AACD;;AAEDA,EAAAA,eAAe,GAAG;AAChB,QAAI,KAAKN,OAAL,KAAiBO,SAAjB,IAA8B,OAAO,KAAKP,OAAZ,KAAwB,QAA1D,EAAoE;AAClE,WAAKG,OAAL,GAAe,KAAf;AACA,WAAKC,OAAL,GAAe,8BAAf;AACA;AACD;;AACD,SAAKI,gBAAL;AACD;;AAEDA,EAAAA,gBAAgB,GAAG,CAAE;;AAErBC,EAAAA,YAAY,GAAG,CAAE;;AAEjBC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKP,OAAZ;AACD;;AAEDQ,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKP,OAAZ;AACD;;AArDc;;;;yBAwDPQ,O,KAAAA,O;;AA4CV,SAASf,UAAT,EAAqBe,OAArB","sourcesContent":["class Validation {\n  userCode: string;\n  loading: object;\n  callback: ((response: any) => any) | undefined;\n  data: IMPData.CertificationData | IMPData.PaymentData | undefined;\n  isValid: boolean;\n  message: string;\n\n  constructor(\n    userCode: string,\n    loading: object,\n    callback?: (response: any) => any,\n    data?: IMPData.CertificationData | IMPData.PaymentData\n  ) {\n    this.userCode = userCode;\n    this.loading = loading;\n    this.callback = callback;\n    this.data = data;\n\n    this.isValid = true;\n    this.message = '';\n\n    this.validateUserCode();\n  }\n\n  validateUserCode() {\n    if (!this.userCode) {\n      this.isValid = false;\n      this.message = '가맹점 식별코드(userCode)는 필수입력입니다.';\n      return;\n    }\n    this.validateLoading();\n  }\n\n  validateLoading() {\n    if (this.loading !== undefined && typeof this.loading !== 'object') {\n      this.isValid = false;\n      this.message = '로딩(loading) 컴포넌트가 올바르지 않습니다.';\n      return;\n    }\n    this.validateCallback();\n  }\n\n  validateCallback() {}\n\n  validateData() {}\n\n  getIsValid() {\n    return this.isValid;\n  }\n\n  getMessage() {\n    return this.message;\n  }\n}\n\nnamespace IMPData {\n  export interface CertificationData {\n    merchant_uid: string;\n    company: string;\n    carrier: string;\n    name: string;\n    phone: string;\n    min_age?: string;\n    m_redirect_url?: string;\n  }\n\n  export interface PaymentData {\n    pg: string;\n    pay_method: string;\n    currency?: string;\n    notice_url?: string | string[];\n    display?: {\n      card_quota: number[];\n    };\n    merchant_uid: string;\n    amount: string | number;\n    buyer_tel: string;\n    app_scheme?: string;\n    escrow: boolean;\n    name: string;\n    tax_free?: number;\n    buyer_name: string;\n    buyer_email: string;\n    buyer_addr?: string;\n    buyer_postcode?: string;\n    custom_data?: object;\n    vbank_due?: string;\n    popup?: boolean;\n    digital?: boolean;\n    language?: string;\n    biz_num?: string;\n    customer_uid?: string;\n    naverPopupMode?: boolean;\n    naverUseCfm?: string;\n    naverProducts?: object[];\n    m_redirect_url?: string;\n  }\n}\n\nexport { Validation, IMPData };\n"]}