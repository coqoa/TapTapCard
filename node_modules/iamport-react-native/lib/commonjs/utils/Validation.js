"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IMPData = exports.Validation = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Validation {
  constructor(userCode, loading, callback, data) {
    _defineProperty(this, "userCode", void 0);

    _defineProperty(this, "loading", void 0);

    _defineProperty(this, "callback", void 0);

    _defineProperty(this, "data", void 0);

    _defineProperty(this, "isValid", void 0);

    _defineProperty(this, "message", void 0);

    this.userCode = userCode;
    this.loading = loading;
    this.callback = callback;
    this.data = data;
    this.isValid = true;
    this.message = '';
    this.validateUserCode();
  }

  validateUserCode() {
    if (!this.userCode) {
      this.isValid = false;
      this.message = '가맹점 식별코드(userCode)는 필수입력입니다.';
      return;
    }

    this.validateLoading();
  }

  validateLoading() {
    if (this.loading !== undefined && typeof this.loading !== 'object') {
      this.isValid = false;
      this.message = '로딩(loading) 컴포넌트가 올바르지 않습니다.';
      return;
    }

    this.validateCallback();
  }

  validateCallback() {}

  validateData() {}

  getIsValid() {
    return this.isValid;
  }

  getMessage() {
    return this.message;
  }

}

exports.Validation = Validation;
let IMPData;
exports.IMPData = IMPData;

(function (_IMPData) {})(IMPData || (exports.IMPData = IMPData = {}));
//# sourceMappingURL=Validation.js.map