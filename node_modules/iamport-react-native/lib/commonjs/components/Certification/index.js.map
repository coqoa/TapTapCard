{"version":3,"sources":["index.tsx"],"names":["Certification","userCode","tierCode","data","loading","callback","isWebViewLoaded","setIsWebViewLoaded","webview","validation","Validation","getIsValid","wrapper","loadingContainer","webViewContainer","viewStyles","ref","current","html","IMPConst","WEBVIEW_SOURCE_HTML","injectJavaScript","JSON","stringify","e","nativeEvent","response","decodeURIComponent","parse","request","url","iamportUrl","IamportUrl","isAppUrl","launchApp","catch","code","message","imp_success","error_code","error_msg","isPaymentOver","getQuery","getMessage"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\nimport { View } from 'react-native';\nimport { WebView } from 'react-native-webview';\n\nimport Loading from '../Loading';\nimport ErrorOnParams from '../ErrorOnParams';\n\nimport { IMPData, Validation } from '../../utils/Validation';\nimport { IMPConst } from '../../constants';\n\nimport viewStyles from '../../styles';\nimport IamportUrl from '../../utils/IamportUrl';\n\ntype Props = {\n  userCode: string;\n  tierCode?: string;\n  data: IMPData.CertificationData;\n  loading: any;\n  callback: (response: any) => any;\n};\n\nfunction Certification({ userCode, tierCode, data, loading, callback }: Props) {\n  const [isWebViewLoaded, setIsWebViewLoaded] = useState(false);\n  const webview = useRef<WebView>();\n\n  const validation = new Validation(userCode, loading);\n  if (validation.getIsValid()) {\n    const { wrapper, loadingContainer, webViewContainer } = viewStyles;\n    return (\n      <View style={wrapper}>\n        <View style={webViewContainer}>\n          <WebView\n            ref={(ref) => {\n              if (ref !== null) {\n                webview.current = ref;\n              }\n            }}\n            useWebKit\n            source={{ html: IMPConst.WEBVIEW_SOURCE_HTML }}\n            onLoadEnd={() => {\n              if (!isWebViewLoaded) {\n                // html이 load되고 최초 한번만 inject javascript\n                if (tierCode) {\n                  webview.current?.injectJavaScript(`\n          setTimeout(function() { IMP.agency(\"${userCode}\", \"${tierCode}\"); });\n        `);\n                } else {\n                  webview.current?.injectJavaScript(`\n          setTimeout(function() { IMP.init(\"${userCode}\"); });\n        `);\n                }\n                webview.current?.injectJavaScript(`\n          setTimeout(function() {\n            IMP.certification(${JSON.stringify(data)}, function(response) {\n              window.ReactNativeWebView.postMessage(JSON.stringify(response));\n            });\n          });\n        `);\n                setIsWebViewLoaded(true);\n              }\n            }}\n            onMessage={(e) => {\n              const { data } = e.nativeEvent;\n              let response = data;\n              while (decodeURIComponent(response) !== response) {\n                response = decodeURIComponent(response);\n              }\n              response = JSON.parse(response);\n\n              if (typeof callback === 'function') {\n                callback(response);\n              }\n            }}\n            startInLoadingState\n            renderLoading={() => (\n              <View style={loadingContainer}>{loading || <Loading />}</View>\n            )}\n            originWhitelist={['*']} // https://github.com/facebook/react-native/issues/19986\n            onShouldStartLoadWithRequest={(request) => {\n              const { url } = request;\n              // console.log('url: ' + url);\n              const iamportUrl = new IamportUrl(url);\n              if (iamportUrl.isAppUrl()) {\n                /* 3rd-party 앱 오픈 */\n                iamportUrl.launchApp().catch((e) => {\n                  const { code, message } = e;\n                  callback({\n                    imp_success: false,\n                    error_code: code,\n                    error_msg: message,\n                  });\n                });\n\n                return false;\n              }\n              if (iamportUrl.isPaymentOver()) {\n                callback(iamportUrl.getQuery());\n                return false;\n              }\n\n              return true;\n            }}\n          />\n        </View>\n      </View>\n    );\n  }\n\n  return <ErrorOnParams message={validation.getMessage()} />;\n}\n\nexport default Certification;\n"]}