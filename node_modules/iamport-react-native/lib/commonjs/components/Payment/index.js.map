{"version":3,"sources":["index.tsx"],"names":["Payment","userCode","tierCode","data","loading","callback","webviewSource","setWebviewSource","html","IMPConst","WEBVIEW_SOURCE_HTML","isWebViewLoaded","setIsWebViewLoaded","showLoading","setShowLoading","isInicisTransPaid","setIsInicisTransPaid","webview","smilepayRef","pg","startsWith","Platform","OS","current","baseUrl","SMILEPAY_BASE_URL","handleOpenURL","event","pay_method","iamportUrl","IamportUrl","url","injectJavaScript","M_REDIRECT_URL","getInicisTransQuery","queryParameters","getQuery","scheme","niceTransRedirectionUrl","app_scheme","toLowerCase","callbackparam1","getStringifiedQuery","Linking","addEventListener","removeLoadingNeeded","isIframeWayPayment","customer_uid","validation","ValidationForPayment","getIsValid","wrapper","loadingContainer","webViewContainer","viewStyles","m_redirect_url","popup","JSON","stringify","e","nativeEvent","response","encodeURIComponent","decodeURIComponent","parse","request","isAppUrl","launchApp","catch","code","message","imp_success","error_code","error_msg","isPaymentOver","isIframeLoaded","getMessage"],"mappings":"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","sourcesContent":["import React, { createRef, useEffect, useRef, useState } from 'react';\nimport type { IMPData } from '../../utils/Validation';\nimport ValidationForPayment from '../../utils/ValidationForPayment';\nimport ErrorOnParams from '../ErrorOnParams';\nimport { Linking, Platform, View } from 'react-native';\nimport { IMPConst } from '../../constants';\nimport IamportUrl from '../../utils/IamportUrl';\nimport WebView from 'react-native-webview';\nimport viewStyles from '../../styles';\nimport Loading from '../Loading';\nimport type { WebViewSource } from 'react-native-webview/lib/WebViewTypes';\n\ntype Props = {\n  userCode: string;\n  tierCode?: string;\n  data: IMPData.PaymentData;\n  loading: any;\n  callback: (response: any) => any;\n};\n\nfunction Payment({ userCode, tierCode, data, loading, callback }: Props) {\n  const [webviewSource, setWebviewSource] = useState<WebViewSource>({\n    html: IMPConst.WEBVIEW_SOURCE_HTML,\n  });\n  const [isWebViewLoaded, setIsWebViewLoaded] = useState(false);\n  const [showLoading, setShowLoading] = useState(true);\n  const [isInicisTransPaid, setIsInicisTransPaid] = useState(false);\n  const webview = createRef<WebView>();\n  const smilepayRef = useRef(false);\n\n  useEffect(() => {\n    const { pg } = data;\n    if (\n      pg.startsWith('smilepay') &&\n      Platform.OS === 'ios' &&\n      !smilepayRef.current\n    ) {\n      /**\n       * [feature/smilepay] IOS - 스마일페이 대비 코드 작성\n       * 스마일페이 결제창을 iframe 방식으로 띄우기 때문에 WKWebView에서 서드 파티 쿠키가 허용되지 않아\n       * WKWebView의 baseUrl을 강제로 스마일페이 URL로 적용\n       */\n      setWebviewSource({\n        ...webviewSource,\n        baseUrl: IMPConst.SMILEPAY_BASE_URL,\n      });\n      smilepayRef.current = true;\n    }\n  }, [data, webviewSource]);\n\n  useEffect(() => {\n    const handleOpenURL = (event: { url: string }) => {\n      const { pg, pay_method } = data;\n      if (pay_method === 'trans') {\n        const iamportUrl = new IamportUrl(event.url);\n        /**\n         * [IOS] 웹 표준 이니시스 - 실시간 계좌이체 대비\n         * 아래 로직대로 동작해야 최종적으로 결제가 승인된 후 콜백 함수가 호출됨\n         * 1. 사파리 앱에서 복귀(app_scheme://imp_uid=%26merchant_uid=%26m_redirect_url=)\n         * 2. 최종 결제 승인을 위해 이니시스가 HTTP 리퀘스트 호출\n         * 3. \"다음\" 버튼이 있는 최종 화면으로 이동\n         * 4. \"다음\" 버튼을 클릭\n         * 5. 1번과 마찬가지로 app_scheme://imp_uid=%26merchant_uid=%26m_redirect_url=로 HTTP 리퀘스트 호출\n         * 6. 콜백 함수 호출\n         * 따라서 현재 handleOpenURL이 트리거 되는 사유가 1번 때문인지 5번 때문인지 구분이 필요하여\n         * 이를 위한 isInicisTransPaid 플래그 추가\n         */\n        if (pg.startsWith('html5_inicis') && Platform.OS === 'ios') {\n          if (isInicisTransPaid) {\n            webview.current?.injectJavaScript(`\n              window.location.href = \"${\n                IMPConst.M_REDIRECT_URL\n              }?${iamportUrl.getInicisTransQuery()}\";\n            `);\n          } else {\n            setIsInicisTransPaid(true);\n          }\n        }\n\n        /* 나이스 - 실시간 계좌이체 대비 */\n        if (pg.startsWith('nice')) {\n          const queryParameters = iamportUrl.getQuery();\n          const scheme = iamportUrl.scheme;\n          let niceTransRedirectionUrl;\n          if (scheme === data.app_scheme?.toLowerCase()) {\n            if (queryParameters.callbackparam1 != null) {\n              niceTransRedirectionUrl = queryParameters.callbackparam1;\n            }\n          }\n          webview.current?.injectJavaScript(`\n            window.location.href = \"${niceTransRedirectionUrl}?${iamportUrl.getStringifiedQuery()}\";\n          `);\n        }\n      }\n    };\n    Linking.addEventListener('url', handleOpenURL);\n  }, [data, isInicisTransPaid, webview]);\n\n  const removeLoadingNeeded = () => {\n    if (showLoading && Platform.OS === 'android') {\n      // 로딩상태. 안드로이드 플랫폼\n      if (isWebViewLoaded) {\n        // 웹뷰 로드 끝. 리디렉션 방식\n        return true;\n      }\n      return isIframeWayPayment();\n    }\n    // IOS\n    return false;\n  };\n\n  const isIframeWayPayment = () => {\n    const { pg, pay_method, customer_uid } = data;\n    if (pg.startsWith('html5_inicis') && customer_uid) {\n      // 이니시스 빌링결제\n      return true;\n    }\n    if (pg.startsWith('mobilians') && pay_method === 'phone') {\n      // 모빌리언스 휴대폰 소액결제\n      return true;\n    }\n    return (\n      pg.startsWith('danal') ||\n      pg.startsWith('danal_tpay') ||\n      pg.startsWith('smilepay') ||\n      pg.startsWith('payco') ||\n      pg.startsWith('bluewalnut')\n    );\n  };\n\n  const validation = new ValidationForPayment(\n    userCode,\n    loading,\n    callback,\n    data\n  );\n  if (validation.getIsValid()) {\n    const { wrapper, loadingContainer, webViewContainer } = viewStyles;\n    return (\n      <View style={wrapper}>\n        <View style={webViewContainer}>\n          <WebView\n            ref={webview}\n            source={webviewSource}\n            onLoadEnd={() => {\n              if (!isWebViewLoaded) {\n                data.m_redirect_url = IMPConst.M_REDIRECT_URL;\n                if (data.pg.startsWith('eximbay')) {\n                  data.popup = false;\n                }\n\n                if (tierCode) {\n                  webview.current?.injectJavaScript(`\n                    setTimeout(function() { IMP.agency(\"${userCode}\", \"${tierCode}\"); });\n                  `);\n                } else {\n                  webview.current?.injectJavaScript(`\n                    setTimeout(function() { IMP.init(\"${userCode}\"); });\n                  `);\n                }\n                webview.current?.injectJavaScript(`\n                  setTimeout(function() {\n                    IMP.request_pay(${JSON.stringify(\n                      data\n                    )}, function(response) {\n                      window.ReactNativeWebView.postMessage(JSON.stringify(response));\n                    });\n                  });\n                `);\n                setIsWebViewLoaded(true);\n              }\n\n              // only for Android\n              if (removeLoadingNeeded()) {\n                setShowLoading(false);\n              }\n            }}\n            /* PG사가 callback을 지원하는 경우, 결제결과를 받아 callback을 실행한다 */\n            onMessage={(e) => {\n              const { data } = e.nativeEvent;\n              /**\n               * [v1.6.0] 다날의 경우 response에 주문명(name)이 포함되어 있는데\n               * 주문명에 %가 들어갈 경우, decodeURIComponent시 URI malformed 에러가 발생하는 것 대비해\n               * 우선 encodeURIComponent를 한 후, decodeURIComponent가 끝나면\n               * 최종적으로 decodeURIComponent를 한 번 더 한다\n               */\n              let response = encodeURIComponent(data);\n              while (decodeURIComponent(response) !== data) {\n                response = decodeURIComponent(response);\n              }\n              response = decodeURIComponent(response);\n              response = JSON.parse(response);\n              callback(response);\n            }}\n            originWhitelist={['*']} // https://github.com/facebook/react-native/issues/19986\n            sharedCookiesEnabled={true}\n            onShouldStartLoadWithRequest={(request) => {\n              const { url } = request;\n              const iamportUrl = new IamportUrl(url);\n              if (iamportUrl.isAppUrl()) {\n                /* 3rd-party 앱 오픈 */\n                iamportUrl.launchApp().catch((e) => {\n                  const { code, message } = e;\n                  callback({\n                    imp_success: false,\n                    error_code: code,\n                    error_msg: message,\n                  });\n                });\n\n                return false;\n              }\n              if (iamportUrl.isPaymentOver()) {\n                callback(iamportUrl.getQuery());\n                return false;\n              }\n              if (\n                isWebViewLoaded &&\n                showLoading &&\n                iamportUrl.isIframeLoaded()\n              ) {\n                /**\n                 * only for IOS\n                 * iframe이 load되면(url이 about:blank 또는 https://service.iamport.kr이 아니면)\n                 * webview의 loading 상태를 해제한다\n                 */\n                setShowLoading(false);\n              }\n              return true;\n            }}\n          />\n        </View>\n        {showLoading && (\n          <View style={loadingContainer}>{loading || <Loading />}</View>\n        )}\n      </View>\n    );\n  }\n\n  return <ErrorOnParams message={validation.getMessage()} />;\n}\n\nexport default Payment;\n"]}