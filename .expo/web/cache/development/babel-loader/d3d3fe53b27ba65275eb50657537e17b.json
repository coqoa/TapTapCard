{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Easing from \"react-native/Libraries/Animated/Easing\";\nimport styled from \"styled-components\";\nimport { WordCardArray } from \"../asset/data/WordCardArray\";\nimport { colors } from \"./color\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar SCREEN_WIDTH = Dimensions.get(\"window\").width;\nvar SCREEN_HEIGHT = Dimensions.get(\"window\").height;\nvar CardSection = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n//Diemension\\uC4F0\\uAE30\\uC704\\uD574 \\uC778\\uB77C\\uC778 style \\uC801\\uC6A9\\n\"])));\nvar Card = styled.View(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n    flex: 1;\\n    align-items: center;\\n    justify-content: center;\\n    margin:30px;\\n    /* border: 1px solid black; */\\n    border-radius: 15px;\\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.4);\\n\"])));\nvar CardImgShell = styled(Animated.createAnimatedComponent(View))(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n    /* flex: 3; */\\n    align-items: center;\\n    justify-content: center;\\n    width: 100%;\\n    height: 80%;\\n    \"])));\nvar CardImg = styled.Image(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"\\n    flex: 1;\\n    width: 100%;\\n    \"])));\nvar CardContents = styled.View(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose([\"\\n    width: 200px;\\n    height: 100px;\\n\"])));\nvar CardName = styled.View(_templateObject6 || (_templateObject6 = _taggedTemplateLiteralLoose([\"\\n    flex:1;\\n    align-items: center;\\n    justify-content: center;\\n\"])));\nvar CardNameText = styled.Text(_templateObject7 || (_templateObject7 = _taggedTemplateLiteralLoose([\"\\n    font-size: 65px;\\n    font-weight: 900;\\n    color: \", \";\\n\"])), colors.REALDARKGRAY);\nexport var WordCard1LV = function WordCard1LV() {\n  return _jsx(FlatList, {\n    horizontal: true,\n    pagingEnabled: true,\n    data: WordCardArray,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return _jsx(CardSection, {\n        style: {\n          width: SCREEN_WIDTH\n        },\n        children: _jsxs(Card, {\n          style: {\n            backgroundColor: item.bgColor\n          },\n          children: [_jsx(CardImgShell, {\n            children: _jsx(CardImg, {\n              source: item.image,\n              resizeMode: \"contain\"\n            })\n          }), _jsx(CardContents, {\n            onPress: function onPress() {\n              return console.log(item.name);\n            },\n            children: _jsx(CardName, {\n              children: _jsx(CardNameText, {\n                children: item.name\n              })\n            })\n          })]\n        })\n      });\n    }\n  });\n};\nvar Record = styled.View(_templateObject8 || (_templateObject8 = _taggedTemplateLiteralLoose([\"\\n    height: 30px;\\n    flex-direction: row;\\n\"])));\nvar CheckRecord = styled.View(_templateObject9 || (_templateObject9 = _taggedTemplateLiteralLoose([\"\\n    flex:1;\\n    flex-direction: row;\\n    justify-content: center;\\n    align-items: center;\\n\"])));\nvar CheckRecordImage = styled.ImageBackground(_templateObject10 || (_templateObject10 = _taggedTemplateLiteralLoose([\"\\n    width: 24px;\\n    height: 24px;\\n    width: 40px;\\n    \"])));\nvar CheckRecordText = styled.Text(_templateObject11 || (_templateObject11 = _taggedTemplateLiteralLoose([\"\\n    color: green;\\n    font-size: 17px;\\n    bottom: 1px;\\n\"])));\nexport var WordCard2LV = function WordCard2LV() {\n  return _jsxs(View, {\n    children: [_jsx(Record, {\n      children: _jsxs(CheckRecord, {\n        children: [_jsx(CheckRecordImage, {\n          source: require(\"../asset/images/Check.png\"),\n          resizeMode: \"contain\"\n        }), _jsx(CheckRecordText, {\n          children: \"2\\uB808\\uBCA8\"\n        })]\n      })\n    }), _jsx(FlatList, {\n      horizontal: true,\n      pagingEnabled: true,\n      data: WordCardArray,\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(CardSection, {\n          style: {\n            width: SCREEN_WIDTH\n          },\n          children: _jsxs(Card, {\n            children: [_jsx(CardImgShell, {\n              children: _jsx(CardImg, {\n                source: item.image,\n                resizeMode: \"contain\"\n              })\n            }), _jsx(CardContents, {\n              onPress: function onPress() {\n                return console.log(item.name);\n              },\n              children: _jsx(CardName, {\n                children: _jsx(CardNameText, {\n                  children: item.name\n                })\n              })\n            })]\n          })\n        });\n      }\n    })]\n  });\n};\nvar Container = styled.View(_templateObject12 || (_templateObject12 = _taggedTemplateLiteralLoose([\"\\n    flex: 1;\\n    justify-content: center;\\n    align-items: center;  \\n    z-index  : 1;\\n    /* background-color: red; */\\n    \"])));\nvar CardContainer = styled.View(_templateObject13 || (_templateObject13 = _taggedTemplateLiteralLoose([\"\\n    flex: 1;\\n    margin-top: 10px;\\n    justify-content: flex-start;\\n    align-items: center;\\n    z-index  : 1;\\n\"])));\nvar ExamCard = styled(Animated.createAnimatedComponent(View))(_templateObject14 || (_templateObject14 = _taggedTemplateLiteralLoose([\"\\n    width: 300px;\\n    height: 540px;\\n    padding: 20px;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 15px;\\n    box-shadow: 1px 1px 5px rgba(0,0,0,0.3);\\n    position: absolute;\\n    border:2px solid \", \" ;\\n\"])), colors.REALDARKGRAY);\nvar ImageAudioBtn = styled.TouchableOpacity(_templateObject15 || (_templateObject15 = _taggedTemplateLiteralLoose([\"\\n    position: absolute;\\n    width: 150px;\\n    height: 150px;\\n    border-radius: 150px;\\n    background-color: rgba(0,0,0,0.1);\\n\"])));\nvar TextAudioBtn = styled.TouchableOpacity(_templateObject16 || (_templateObject16 = _taggedTemplateLiteralLoose([\"\\n    position: absolute;\\n    width: 80px;\\n    height: 80px;\\n    border-radius: 80px;\\n    background-color: rgba(0,0,0,0.1);\\n\"])));\nvar CheckBtn = styled(Animated.createAnimatedComponent(View))(_templateObject17 || (_templateObject17 = _taggedTemplateLiteralLoose([\"\\n        position: absolute;\\n        left: 0px;\\n        top: 40%;\\n        /* border: 1px solid gray; */\\n\"])));\nvar NonCheckBtn = styled(Animated.createAnimatedComponent(View))(_templateObject18 || (_templateObject18 = _taggedTemplateLiteralLoose([\"\\n        position: absolute;\\n        right: 0px;\\n        top: 40%;\\n        /* border: 1px solid gray; */\\n\"])));\nvar CheckBtnImage = styled.ImageBackground(_templateObject19 || (_templateObject19 = _taggedTemplateLiteralLoose([\"\\n        width: 56px;\\n        height: 56px;\\n        align-items: center;\\n        justify-content: center;\\n        /* border: 1px solid gray; */\\n\"])));\nvar CheckSplashScreen = styled(Animated.createAnimatedComponent(View))(_templateObject20 || (_templateObject20 = _taggedTemplateLiteralLoose([\"\\n    position: absolute;\\n    width: 300px;\\n    height: 500px;\\n    /* background-color: rgba(0,0,0,0.1); */\\n    align-items: center;\\n    justify-content: center;\\n\"])));\nvar CheckSplashScreenImage = styled.View(_templateObject21 || (_templateObject21 = _taggedTemplateLiteralLoose([\"\\n    width: 200px;\\n    height: 250px;\\n    align-items: center;\\n    justify-content: center;\\n    background-color: \", \";\\n    border-radius: 10px;\\n\"])), colors.BEIGE);\nexport var WordCard3LV = function WordCard3LV() {\n  var scale = useRef(new Animated.Value(1)).current;\n  var position = useRef(new Animated.Value(0)).current;\n  var cardImageOpacity = useRef(new Animated.Value(1)).current;\n  var btnOpacity = useRef(new Animated.Value(0)).current;\n  var rotation = position.interpolate({\n    inputRange: [-250, 250],\n    outputRange: [\"-15deg\", \"15deg\"],\n    extrapolate: \"clamp\"\n  });\n  var secondScale = position.interpolate({\n    inputRange: [-200, 0, 200],\n    outputRange: [1, 0.7, 1],\n    extrapolate: \"clamp\"\n  });\n  var cardImageOpacityVisible = Animated.timing(cardImageOpacity, {\n    toValue: 1,\n    useNativeDriver: true\n  });\n  var cardImageOpacityInisible = Animated.timing(cardImageOpacity, {\n    toValue: 0,\n    useNativeDriver: true\n  });\n  var CheckBtnOpacityInput = Animated.timing(btnOpacity, {\n    toValue: 1,\n    useNativeDriver: true\n  });\n  var CheckBtnOpacityOutput = Animated.timing(btnOpacity, {\n    toValue: 0,\n    useNativeDriver: true\n  });\n  var onPressIn = Animated.spring(scale, {\n    toValue: 0.9,\n    useNativeDriver: true\n  });\n  var onPressOut = Animated.spring(scale, {\n    toValue: 1,\n    useNativeDriver: true\n  });\n  var goCenter = Animated.spring(position, {\n    toValue: 0,\n    tension: 100,\n    friction: 5,\n    useNativeDriver: true\n  });\n  var goLeft = Animated.spring(position, {\n    toValue: -SCREEN_WIDTH - 200,\n    tension: 35,\n    restSpeedThreshold: 1,\n    restDisplacementThreshold: 1,\n    useNativeDriver: true\n  });\n  var goRight = Animated.spring(position, {\n    toValue: SCREEN_WIDTH + 200,\n    restSpeedThreshold: 1,\n    restDisplacementThreshold: 1,\n    tension: 35,\n    useNativeDriver: true\n  });\n  var panResponder = useRef(PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n      return true;\n    },\n    onPanResponderMove: function onPanResponderMove(_, _ref3) {\n      var dx = _ref3.dx;\n      position.setValue(dx);\n    },\n    onPanResponderGrant: function onPanResponderGrant() {\n      Animated.parallel([CheckBtnOpacityInput, onPressIn]).start();\n    },\n    onPanResponderRelease: function onPanResponderRelease(_, _ref4) {\n      var dx = _ref4.dx;\n\n      if (dx < -180) {\n        Animated.parallel([goLeft, CheckBtnOpacityOutput, cardImageOpacityInisible]).start(onDismiss);\n      } else if (dx > 180) {\n        Animated.parallel([goRight, CheckBtnOpacityOutput]).start(onDismiss);\n      } else Animated.parallel([onPressOut, CheckBtnOpacityOutput, goCenter]).start();\n    }\n  })).current;\n  var randomIndexConsole = WordCardArray.filter(function (dat) {\n    if (dat.check == false) {\n      return dat;\n    } else {\n      null;\n    }\n  });\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      index = _useState2[0],\n      setIndex = _useState2[1];\n\n  var checkCard = function checkCard() {\n    console.log(WordCardArray[index]);\n  };\n\n  var onDismiss = function onDismiss() {\n    setIndex(function (prev) {\n      return prev + 1;\n    });\n    scale.setValue(1);\n    position.setValue(0);\n  };\n\n  var onDismissRight = function onDismissRight() {\n    setIndex(function (prev) {\n      return prev - 1;\n    });\n    scale.setValue(1);\n    position.setValue(0);\n  };\n\n  var checkPress = function checkPress() {\n    goLeft.start(onDismiss);\n  };\n\n  var closePress = function closePress() {\n    goRight.start(onDismiss);\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(Container, {\n      children: _jsxs(CardContainer, {\n        children: [_jsxs(ExamCard, {\n          style: {\n            backgroundColor: WordCardArray[index + 1].bgColor,\n            transform: [{\n              scale: secondScale\n            }]\n          },\n          children: [_jsx(CardImgShell, {\n            children: _jsx(CardImg, {\n              source: WordCardArray[index + 1].image,\n              resizeMode: \"contain\"\n            })\n          }), _jsx(CardContents, {\n            children: _jsx(CardName, {\n              children: _jsx(CardNameText, {\n                children: WordCardArray[index + 1].name\n              })\n            })\n          })]\n        }), WordCardArray.length - 3 >= index ? _jsxs(ExamCard, _objectSpread(_objectSpread({}, panResponder.panHandlers), {}, {\n          style: {\n            backgroundColor: WordCardArray[index].bgColor,\n            transform: [{\n              scale: scale\n            }, {\n              translateX: position\n            }, {\n              rotateZ: rotation\n            }]\n          },\n          children: [_jsxs(CardImgShell, {\n            style: {\n              opacity: cardImageOpacity\n            },\n            children: [_jsx(CardImg, {\n              source: WordCardArray[index].image,\n              resizeMode: \"contain\",\n              onPress: function onPress() {\n                return console.log(WordCardArray[index].id);\n              }\n            }), _jsx(ImageAudioBtn, {\n              onPress: function onPress() {\n                console.log('이미지 오디오 출력');\n              }\n            })]\n          }), _jsx(CardContents, {\n            children: _jsxs(CardName, {\n              children: [_jsx(CardNameText, {\n                children: WordCardArray[index].name\n              }), _jsx(TextAudioBtn, {\n                onPress: function onPress() {\n                  console.log('텍스트 오디오 출력');\n                }\n              })]\n            })\n          })]\n        })) : _jsxs(ExamCard, {\n          style: {\n            backgroundColor: WordCardArray[index].bgColor,\n            transform: [{\n              scale: scale\n            }, {\n              translateX: position\n            }, {\n              rotateZ: rotation\n            }]\n          },\n          children: [_jsxs(CardImgShell, {\n            children: [_jsx(CardImg, {\n              source: WordCardArray[index].image,\n              resizeMode: \"contain\",\n              onPress: function onPress() {\n                return console.log(WordCardArray[index].id);\n              }\n            }), _jsx(ImageAudioBtn, {\n              onPress: function onPress() {\n                console.log('이미지 오디오 출력');\n              }\n            })]\n          }), _jsx(CardContents, {\n            children: _jsxs(CardName, {\n              children: [_jsx(CardNameText, {\n                children: WordCardArray[index].name\n              }), _jsx(TextAudioBtn, {\n                onPress: function onPress() {\n                  console.log('텍스트 오디오 출력');\n                }\n              })]\n            })\n          })]\n        })]\n      })\n    }), _jsx(CheckBtn, {\n      style: {\n        opacity: btnOpacity\n      },\n      children: _jsx(CheckBtnImage, {\n        children: _jsx(Ionicons, {\n          name: \"checkmark-circle\",\n          size: 50,\n          color: colors.NAVY\n        })\n      })\n    }), _jsx(NonCheckBtn, {\n      style: {\n        opacity: btnOpacity\n      },\n      children: _jsx(CheckBtnImage, {\n        children: _jsx(Ionicons, {\n          name: \"help-circle\",\n          size: 50,\n          color: colors.TOMATO\n        })\n      })\n    })]\n  });\n};","map":{"version":3,"sources":["/Users/coqoa/Downloads/RN-APP/taptapcard/app/component/CardDefault.js"],"names":["React","useState","useEffect","useRef","Easing","styled","WordCardArray","colors","Ionicons","SCREEN_WIDTH","Dimensions","get","width","SCREEN_HEIGHT","height","CardSection","View","Card","CardImgShell","Animated","createAnimatedComponent","CardImg","Image","CardContents","CardName","CardNameText","Text","REALDARKGRAY","WordCard1LV","item","backgroundColor","bgColor","image","console","log","name","Record","CheckRecord","CheckRecordImage","ImageBackground","CheckRecordText","WordCard2LV","require","Container","CardContainer","ExamCard","ImageAudioBtn","TouchableOpacity","TextAudioBtn","CheckBtn","NonCheckBtn","CheckBtnImage","CheckSplashScreen","CheckSplashScreenImage","BEIGE","WordCard3LV","scale","Value","current","position","cardImageOpacity","btnOpacity","rotation","interpolate","inputRange","outputRange","extrapolate","secondScale","cardImageOpacityVisible","timing","toValue","useNativeDriver","cardImageOpacityInisible","CheckBtnOpacityInput","CheckBtnOpacityOutput","onPressIn","spring","onPressOut","goCenter","tension","friction","goLeft","restSpeedThreshold","restDisplacementThreshold","goRight","panResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderMove","_","dx","setValue","onPanResponderGrant","parallel","start","onPanResponderRelease","onDismiss","randomIndexConsole","filter","dat","check","index","setIndex","checkCard","prev","onDismissRight","checkPress","closePress","transform","length","panHandlers","translateX","rotateZ","opacity","id","NAVY","TOMATO"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\"\nimport {View, Dimensions, FlatList, Animated, TouchableOpacity, Pressable, PanResponder } from \"react-native\";\nimport Easing from \"react-native/Libraries/Animated/Easing\";\nimport styled from \"styled-components\"\nimport { WordCardArray } from \"../asset/data/WordCardArray\";\nimport { colors } from \"./color\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\nconst SCREEN_WIDTH = Dimensions.get(\"window\").width;\nconst SCREEN_HEIGHT = Dimensions.get(\"window\").height;\n\nconst CardSection = styled.View`\n//Diemension쓰기위해 인라인 style 적용\n`\nconst Card = styled.View`\n    flex: 1;\n    align-items: center;\n    justify-content: center;\n    margin:30px;\n    /* border: 1px solid black; */\n    border-radius: 15px;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.4);\n`\nconst CardImgShell = styled(Animated.createAnimatedComponent(View))`\n    /* flex: 3; */\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 80%;\n    `\nconst CardImg = styled.Image`\n    flex: 1;\n    width: 100%;\n    `\nconst CardContents = styled.View`\n    width: 200px;\n    height: 100px;\n`\nconst CardName = styled.View`\n    flex:1;\n    align-items: center;\n    justify-content: center;\n`\nconst CardNameText = styled.Text`\n    font-size: 65px;\n    font-weight: 900;\n    color: ${colors.REALDARKGRAY};\n`\n\nexport const WordCard1LV = () => {\n\n    return(\n    <FlatList\n        horizontal\n        pagingEnabled\n        data={WordCardArray}\n        renderItem = {({item})=>(\n            <CardSection style={{width:SCREEN_WIDTH}}> \n                <Card style={{backgroundColor : item.bgColor}}>\n                    {/* <CheckBtn onPress={() => console.log(item.id)}>\n                        <CheckBtnImage source={require(\"../asset/images/EmptyCheck.png\")}></CheckBtnImage>\n                    </CheckBtn> */}\n                    <CardImgShell>\n                        <CardImg source={item.image} resizeMode=\"contain\"></CardImg>\n                    </CardImgShell>\n                    <CardContents onPress={() => console.log(item.name)}>\n                        <CardName>\n                            <CardNameText>{item.name}</CardNameText>\n                        </CardName>\n                    </CardContents>\n                </Card>\n            </CardSection>\n        )}\n    />\n    )\n}\n\nconst Record = styled.View`\n    height: 30px;\n    flex-direction: row;\n`\nconst CheckRecord = styled.View`\n    flex:1;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n`\nconst CheckRecordImage = styled.ImageBackground`\n    width: 24px;\n    height: 24px;\n    width: 40px;\n    `\nconst CheckRecordText = styled.Text`\n    color: green;\n    font-size: 17px;\n    bottom: 1px;\n`\n\n//레벨2 레벨3은 이런식으로 작성하면 될것같음\nexport const WordCard2LV = () => {\n\n    return(\n    <View>\n        <Record>\n            <CheckRecord>\n                <CheckRecordImage source={require(\"../asset/images/Check.png\")} resizeMode=\"contain\"></CheckRecordImage>\n                <CheckRecordText>2레벨</CheckRecordText>\n            </CheckRecord>\n        </Record>\n\n        <FlatList\n            horizontal\n            pagingEnabled\n            data={WordCardArray}\n            renderItem = {({item})=>(\n                \n                <CardSection style={{width:SCREEN_WIDTH}}> \n                    <Card>\n                        {/* <CheckBtn onPress={() => console.log(item.id)}>\n                            <CheckBtnImage source={require(\"../asset/images/EmptyCheck.png\")}></CheckBtnImage>\n                        </CheckBtn> */}\n                        <CardImgShell>\n                            <CardImg source={item.image} resizeMode=\"contain\"></CardImg>\n                        </CardImgShell>\n                        <CardContents onPress={() => console.log(item.name)}>\n                            <CardName>\n                                <CardNameText>{item.name}</CardNameText>\n                            </CardName>\n                        </CardContents>\n                    </Card>\n                </CardSection>\n            )}\n        />\n    </View>\n    )\n}\n\n\n\n\n\nconst Container = styled.View`\n    flex: 1;\n    justify-content: center;\n    align-items: center;  \n    z-index  : 1;\n    /* background-color: red; */\n    `\nconst CardContainer = styled.View`\n    flex: 1;\n    margin-top: 10px;\n    justify-content: flex-start;\n    align-items: center;\n    z-index  : 1;\n`\nconst ExamCard = styled(Animated.createAnimatedComponent(View))`\n    width: 300px;\n    height: 540px;\n    padding: 20px;\n    justify-content: center;\n    align-items: center;\n    border-radius: 15px;\n    box-shadow: 1px 1px 5px rgba(0,0,0,0.3);\n    position: absolute;\n    border:2px solid ${colors.REALDARKGRAY} ;\n`\n// const BtnContainer = styled.View`\n//     flex-direction: row;\n//     align-items: center;\n//     justify-content: space-between;\n//     border: 1px solid red;\n// `\nconst ImageAudioBtn = styled.TouchableOpacity`\n    position: absolute;\n    width: 150px;\n    height: 150px;\n    border-radius: 150px;\n    background-color: rgba(0,0,0,0.1);\n`\nconst TextAudioBtn = styled.TouchableOpacity`\n    position: absolute;\n    width: 80px;\n    height: 80px;\n    border-radius: 80px;\n    background-color: rgba(0,0,0,0.1);\n`\nconst CheckBtn = styled(Animated.createAnimatedComponent(View))`\n        position: absolute;\n        left: 0px;\n        top: 40%;\n        /* border: 1px solid gray; */\n`\nconst NonCheckBtn = styled(Animated.createAnimatedComponent(View))`\n        position: absolute;\n        right: 0px;\n        top: 40%;\n        /* border: 1px solid gray; */\n`\nconst CheckBtnImage = styled.ImageBackground`\n        width: 56px;\n        height: 56px;\n        align-items: center;\n        justify-content: center;\n        /* border: 1px solid gray; */\n`\nconst CheckSplashScreen = styled(Animated.createAnimatedComponent(View))`\n    position: absolute;\n    width: 300px;\n    height: 500px;\n    /* background-color: rgba(0,0,0,0.1); */\n    align-items: center;\n    justify-content: center;\n`\nconst CheckSplashScreenImage = styled.View`\n    width: 200px;\n    height: 250px;\n    align-items: center;\n    justify-content: center;\n    background-color: ${colors.BEIGE};\n    border-radius: 10px;\n`\n// const AnimatedCard = Animated.createAnimatedComponent(ExamCard);\n\n//----------__----------__----------__----------__----------__----------__----------__----------__----------__\n\nexport const WordCard3LV = () => {\n    //Values\n    const scale = useRef(new Animated.Value(1)).current;\n    const position = useRef(new Animated.Value(0)).current;\n    const cardImageOpacity = useRef(new Animated.Value(1)).current;\n    const btnOpacity = useRef(new Animated.Value(0)).current;\n    // const checkSplash = useRef(new Animated.Value(0.9)).current;\n\n    const rotation = position.interpolate({\n        inputRange:[-250, 250],\n        outputRange:[\"-15deg\", \"15deg\"],\n        extrapolate: \"clamp\" // 범위에서 넘어가면 interpolate를 어떻게 처리할지 ?\n    });\n    const secondScale = position.interpolate({\n        inputRange:[-200, 0, 200],\n        outputRange:[1, 0.7, 1],\n        extrapolate:\"clamp\"\n    }) ;\n    const cardImageOpacityVisible = Animated.timing(cardImageOpacity, {\n        toValue: 1,\n        useNativeDriver:true\n    })\n    const cardImageOpacityInisible = Animated.timing(cardImageOpacity, {\n        toValue: 0,\n        useNativeDriver:true\n    })\n    const CheckBtnOpacityInput = Animated.timing(btnOpacity, {\n        toValue: 1,\n        useNativeDriver:true\n    })\n    const CheckBtnOpacityOutput = Animated.timing(btnOpacity, {\n        toValue: 0,\n        useNativeDriver:true\n    })\n    // const checkSplashUpScale = Animated.timing(checkSplash, {\n    //     toValue: 1.1,\n    //     duration: 300,\n    //     delay: 0,\n    //     useNativeDriver:true\n    // })\n    // const checkSplashDownScale = Animated.timing(checkSplash, {\n    //     toValue: 0.9,\n    //     duration: 100,\n    //     delay: 0,\n    //     useNativeDriver:true\n    // })\n    //Animations\n    const onPressIn = Animated.spring(scale, {\n        toValue:0.9, \n        useNativeDriver:true\n    });\n    const onPressOut = Animated.spring(scale, {\n        toValue:1, \n        useNativeDriver:true\n    });\n    const goCenter = Animated.spring(position, {\n        toValue:0,\n        tension:100,\n        friction:5,\n        useNativeDriver:true,\n    });\n    const goLeft = Animated.spring(position, {\n        toValue: -SCREEN_WIDTH-200, \n        tension: 35,\n        restSpeedThreshold: 1,\n        restDisplacementThreshold:1,\n        useNativeDriver:true\n    });\n    const goRight = Animated.spring(position, {\n        toValue: SCREEN_WIDTH+200, \n        restSpeedThreshold: 1,\n        restDisplacementThreshold:1,\n        tension: 35,\n        useNativeDriver:true\n    });\n    //panResponder\n    const panResponder = useRef(\n        PanResponder.create({\n            onStartShouldSetPanResponder: () => true,\n            onPanResponderMove:(_,{dx}) => {\n                position.setValue(dx)\n\n            }, \n            onPanResponderGrant: () => {\n                Animated.parallel(\n                    [CheckBtnOpacityInput,onPressIn]\n                ).start();\n                // onPressIn.start()\n            },\n            onPanResponderRelease: (_, {dx}) => {\n                if(dx < -180){\n                    // console.log(\"dismiss to the left\")\n                    // Animated.parallel([goLeft,CheckBtnOpacityOutput,checkSplashUpScale]).start(onDismiss);\n                    Animated.parallel([goLeft,CheckBtnOpacityOutput,cardImageOpacityInisible]).start(onDismiss);\n                }else if(dx>180){\n                    // console.log(\"dismiss to the right\")\n                    Animated.parallel([goRight,CheckBtnOpacityOutput]).start(onDismiss);\n\n                }else\n                Animated.parallel([onPressOut,CheckBtnOpacityOutput, goCenter]).start();\n                \n            },\n\n        })\n    ).current\n    // State\n    \n    // let cardArrayNum = WordCardArray.length;\n    // function randomIndex(){\n    //     let ranNum = Math.floor(Math.random()*(cardArrayNum))+1\n    //     return ranNum;\n    // } \n    const randomIndexConsole =  WordCardArray.filter((dat)=>{\n        if(dat.check == false){\n            return dat\n        }else{\n            null\n        }\n    })\n    // console.log(randomIndexConsole[0].id)\n\n    // const [index, setIndex] = useState(randomIndexConsole[0].id);\n    const [index, setIndex] = useState(0);\n    const checkCard = () => {\n        console.log(WordCardArray[index])\n    }\n    // checkCard()\n    // 여기서 막혔음 (좌로 가면 check true로 바꾸고싶은데 좌로 카드를 넘겨도 계속 index가 0 으로 출력됨)\n    //onDismiss에서 index를 바꾸는데 왜 PanResponder에서는 적용이 안되지? \n    // check값을 출력하고 바꾸려면 어떻게 해야하지?\n\n\n    const onDismiss = () => {\n        // if (index+4 == WordCardArray.length){\n        //     null\n        // }else{\n            setIndex((prev) => prev +1)\n            scale.setValue(1);\n            position.setValue(0);\n            // cardImageOpacityVisible.start();\n            // Animated.sequence([checkSplashUpScale, checkSplashDownScale]).start();\n            \n            \n            // console.log(index)//계속 0만뜬다 onDismiss밖에서는 정상작동함\n        // }\n    }\n    const onDismissRight = () => {\n        // if (index+4 == WordCardArray.length){\n        //     null\n        // }else{\n            setIndex((prev) => prev -1)\n            scale.setValue(1);\n            position.setValue(0);\n            // Animated.sequence([checkSplashUpScale, checkSplashDownScale]).start();\n            \n            \n            // console.log(index)//계속 0만뜬다 onDismiss밖에서는 정상작동함\n        // }\n    }\n    const checkPress = () => {\n        goLeft.start(onDismiss);\n    }\n    const closePress = () =>{\n        goRight.start(onDismiss);\n    }\n    return(\n        <>\n        <Container>\n            \n            <CardContainer>\n                {/* backCard */}\n                <ExamCard \n                // {...panResponder.panHandlers}\n                style={{\n                    backgroundColor:WordCardArray[index+1].bgColor,\n                    transform:[{scale:secondScale}]\n                }}>\n                    <CardImgShell>\n                        <CardImg source={WordCardArray[index+1].image} resizeMode=\"contain\"></CardImg>\n                    </CardImgShell>\n                    {/* <CardContents onPress={() => console.log(wordCard[index+1].id)}> */}\n                    <CardContents>\n                        <CardName>\n                            <CardNameText>{WordCardArray[index+1].name}</CardNameText>\n                        </CardName>\n                    </CardContents>\n                </ExamCard>\n                {/* fronCard */}\n                {WordCardArray.length-3 >= index ? ( // 배열의 마지막카드 전에 카드움직이기 멈추도록, else부분에 축하애니메이션+ 다음레벨 모달창을 넣을 수도 있음\n                    <ExamCard \n                    {...panResponder.panHandlers}\n                    style={{\n                        backgroundColor:WordCardArray[index].bgColor,\n                        transform:[{scale},{translateX:position}, {rotateZ:rotation}]\n                    }}>\n                        <CardImgShell style={{opacity:cardImageOpacity}}>\n                        <CardImg \n                        source={WordCardArray[index].image} \n                        resizeMode=\"contain\"\n                        onPress={() => console.log(WordCardArray[index].id)}\n                        />\n                        <ImageAudioBtn onPress={()=>{console.log('이미지 오디오 출력')}} />\n                    \n                        </CardImgShell>\n                        {/* <CardContents onPress={() => console.log(wordCardArray[index].id)}> */}\n                        <CardContents>\n                            <CardName>\n                                <CardNameText>{WordCardArray[index].name}</CardNameText>\n                                <TextAudioBtn onPress={()=>{console.log('텍스트 오디오 출력')}} />\n                            </CardName>\n                        </CardContents>\n                    </ExamCard>\n                ) : (\n                    <ExamCard \n                    style={{\n                        backgroundColor:WordCardArray[index].bgColor,\n                        transform:[{scale},{translateX:position}, {rotateZ:rotation}]\n                    }}>\n                        <CardImgShell>\n                        <CardImg \n                        source={WordCardArray[index].image} \n                        resizeMode=\"contain\"\n                        onPress={() => console.log(WordCardArray[index].id)}\n                        />\n                        <ImageAudioBtn onPress={()=>{console.log('이미지 오디오 출력')}} />\n                    \n                        </CardImgShell>\n                        {/* <CardContents onPress={() => console.log(WordCardArray[index].id)}> */}\n                        <CardContents>\n                            <CardName>\n                                <CardNameText>{WordCardArray[index].name}</CardNameText>\n                                <TextAudioBtn onPress={()=>{console.log('텍스트 오디오 출력')}} />\n                            </CardName>\n                        </CardContents>\n                    </ExamCard>\n                )}\n                \n                    \n            </CardContainer>\n            {/* <CheckSplashScreen style={{\n                    zIndex: checkSplash,\n                    transform: [{scale:checkSplash}],\n                    opacity: 1\n                }}>\n                <CheckSplashScreenImage>\n                    <Ionicons name=\"checkmark-circle\" size={50} color={colors.NAVY} />\n                </CheckSplashScreenImage>\n            </CheckSplashScreen> */}\n        </Container>\n\n        <CheckBtn style={{\n            opacity: btnOpacity,\n        }}>\n            {/* <StarViewImage source={require(\"../asset/images/Check.png\") }></StarViewImage> */}\n            <CheckBtnImage>\n                <Ionicons name=\"checkmark-circle\" size={50} color={colors.NAVY} />\n            </CheckBtnImage>\n        </CheckBtn>\n        <NonCheckBtn style={{\n            opacity: btnOpacity,\n        }}>\n            {/* <StarViewImage source={require(\"../asset/images/Random.png\")}></StarViewImage> */}\n            <CheckBtnImage>\n                <Ionicons name=\"help-circle\" size={50} color={colors.TOMATO} />\n            </CheckBtnImage>\n        </NonCheckBtn>\n\n        </>\n    )\n}\n    // <View>\n    //     <Record>\n    //         <CheckRecord>\n    //             <CheckRecordImage source={require(\"../asset/images/Check.png\")} resizeMode=\"contain\"></CheckRecordImage>\n    //             <CheckRecordText>3레벨</CheckRecordText>\n    //         </CheckRecord>\n    //     </Record>\n\n    //     <FlatList\n    //         horizontal\n    //         pagingEnabled\n    //         data={WordCardArray}\n    //         renderItem = {({item})=>(\n    //             <CardSection style={{width:SCREEN_WIDTH}}> \n    //                 <Card>\n    //                     {/* <CheckBtn onPress={() => console.log(item.id)}>\n    //                         <CheckBtnImage source={require(\"../asset/images/EmptyCheck.png\")}></CheckBtnImage>\n    //                     </CheckBtn> */}\n    //                     <CardImgShell>\n    //                         <CardImg source={item.image} resizeMode=\"contain\"></CardImg>\n    //                     </CardImgShell>\n    //                     <CardContents onPress={() => console.log(item.name)}>\n    //                         <CardName>\n    //                             <CardNameText>{item.name}</CardNameText>\n    //                         </CardName>\n    //                     </CardContents>\n    //                 </Card>\n    //             </CardSection>\n    //         )}\n    //     />\n    // </View>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}