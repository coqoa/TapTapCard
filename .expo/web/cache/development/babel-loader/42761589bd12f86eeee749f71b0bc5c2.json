{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport AppLoading from 'expo-app-loading';\nimport React, { useState } from 'react';\nimport Stack from \"./app/navigators/Stack\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport WordPlay from \"./app/screens/WordPlay\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      ready = _useState2[0],\n      setReady = _useState2[1];\n\n  var onFinish = function onFinish() {\n    return setReady(true);\n  };\n\n  var startLoading = function startLoading() {\n    return _regeneratorRuntime.async(function startLoading$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!ready) {\n    return _jsx(AppLoading, {\n      startAsync: startLoading,\n      onFinish: onFinish,\n      onError: console.log\n    });\n  }\n\n  return _jsx(NavigationContainer, {\n    children: _jsx(SafeAreaView, {\n      style: {\n        flex: 1\n      },\n      children: _jsx(WordPlay, {})\n    })\n  });\n}","map":{"version":3,"sources":["/Users/coqoa/Downloads/RN-APP/taptapcard/App.js"],"names":["NavigationContainer","AppLoading","React","useState","Stack","SafeAreaView","WordPlay","App","ready","setReady","onFinish","startLoading","console","log","flex"],"mappings":";;AAAA,SAASA,mBAAT,QAAoC,0BAApC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,OAAOC,QAAP;;AAGA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAA0BJ,QAAQ,CAAC,KAAD,CAAlC;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,WAAMD,QAAQ,CAAC,IAAD,CAAd;AAAA,GAAjB;;AACA,MAAME,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAIA,MAAG,CAACH,KAAJ,EAAU;AACR,WACA,KAAC,UAAD;AACE,MAAA,UAAU,EAAEG,YADd;AAEE,MAAA,QAAQ,EAAED,QAFZ;AAGE,MAAA,OAAO,EAAEE,OAAO,CAACC;AAHnB,MADA;AASD;;AACD,SACE,KAAC,mBAAD;AAAA,cACE,KAAC,YAAD;AAAc,MAAA,KAAK,EAAE;AAACC,QAAAA,IAAI,EAAC;AAAN,OAArB;AAAA,gBAEE,KAAC,QAAD;AAFF;AADF,IADF;AAQD","sourcesContent":["import { NavigationContainer } from '@react-navigation/native';\nimport AppLoading from 'expo-app-loading';\nimport React, { useState } from 'react';\nimport Stack from './app/navigators/Stack';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport WordPlay from './app/screens/WordPlay';\n\n\nexport default function App() {\n  const [ready, setReady] = useState(false);\n  const onFinish = () => setReady(true);\n  const startLoading = async () =>{\n    // 로딩하고 싶은 것들을 담는 공간 \n    // (ex. API호출 혹은 정보를 받거나 video요소를 미리 받아놓거나, DB를 미리 열거나, 아이콘을 미리준비)\n  };\n  if(!ready){\n    return (\n    <AppLoading\n      startAsync={startLoading}\n      onFinish={onFinish}\n      onError={console.log} />\n      // ready가 안되어있으면 AppLoading은 splash screen을 비추도록 강제하고 startAsync를 호출,\n      // startAsync가 완료되면 AppLoading은 onFinish함수를 호출, \n      // onFinish는 state를 변경시키고 state가 변경되면 조건문 else에 해당하는 부분을 render한다\n    );\n  }\n  return (\n    <NavigationContainer>\n      <SafeAreaView style={{flex:1}}>\n        {/* <Stack /> */}\n        <WordPlay />\n      </SafeAreaView>\n    </NavigationContainer>\n  )\n}"]},"metadata":{},"sourceType":"module"}